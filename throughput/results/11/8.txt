BEGIN;
BEGIN
EXPLAIN (ANALYZE, BUFFERS)
select
	o_year,
	sum(case
		when nation = 'MOZAMBIQUE' then volume
		else 0
	end) / sum(volume) as mkt_share
from
	(
		select
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) as volume,
			n2.n_name as nation
		from
			part,
			supplier,
			lineitem,
			orders,
			customer,
			nation n1,
			nation n2,
			region
		where
			p_partkey = l_partkey
			and s_suppkey = l_suppkey
			and l_orderkey = o_orderkey
			and o_custkey = c_custkey
			and c_nationkey = n1.n_nationkey
			and n1.n_regionkey = r_regionkey
			and r_name = 'AFRICA'
			and s_nationkey = n2.n_nationkey
			and o_orderdate between date '1995-01-01' and date '1996-12-31'
			and p_type = 'PROMO POLISHED STEEL'
	) as all_nations
group by
	o_year
order by
	o_year;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=1731648.77..1731650.59 rows=727 width=38) (actual time=10923.876..10923.877 rows=2 loops=1)
   Sort Key: (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
   Sort Method: quicksort  Memory: 25kB
   Buffers: shared hit=1815965 read=201159 dirtied=24
   ->  HashAggregate  (cost=1731601.50..1731614.22 rows=727 width=38) (actual time=10923.812..10923.813 rows=2 loops=1)
         Group Key: date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
         Buffers: shared hit=1815962 read=201159 dirtied=24
         ->  Hash Join  (cost=39449.71..1731114.06 rows=24372 width=38) (actual time=878.138..10883.826 rows=24465 loops=1)
               Hash Cond: (supplier.s_nationkey = n2.n_nationkey)
               Buffers: shared hit=1815962 read=201159 dirtied=24
               ->  Nested Loop  (cost=39448.15..1730655.52 rows=24372 width=16) (actual time=878.075..10846.412 rows=24465 loops=1)
                     Buffers: shared hit=1815958 read=201159 dirtied=24
                     ->  Hash Join  (cost=39447.86..1722791.58 rows=24372 width=16) (actual time=878.051..10629.573 rows=24465 loops=1)
                           Hash Cond: (orders.o_custkey = customer.c_custkey)
                           Buffers: shared hit=1742406 read=201159 dirtied=24
                           ->  Nested Loop  (cost=417.17..1683060.20 rows=121860 width=20) (actual time=7.872..9621.092 rows=121541 loops=1)
                                 Buffers: shared hit=1599806 read=197611 dirtied=24
                                 ->  Nested Loop  (cost=416.74..1485576.02 rows=403319 width=16) (actual time=7.578..4735.999 rows=401422 loops=1)
                                       Buffers: shared hit=287008 read=183214 dirtied=18
                                       ->  Bitmap Heap Scan on part  (cost=412.02..28159.98 rows=13367 width=4) (actual time=7.463..194.327 rows=13376 loops=1)
                                             Recheck Cond: ((p_type)::text = 'PROMO POLISHED STEEL'::text)
                                             Heap Blocks: exact=11470
                                             Buffers: shared hit=1 read=11553
                                             ->  Bitmap Index Scan on part_p_type_p_partkey_idx  (cost=0.00..408.68 rows=13367 width=0) (actual time=5.106..5.106 rows=13376 loops=1)
                                                   Index Cond: ((p_type)::text = 'PROMO POLISHED STEEL'::text)
                                                   Buffers: shared read=84
                                       ->  Bitmap Heap Scan on lineitem  (cost=4.72..108.72 rows=31 width=20) (actual time=0.041..0.328 rows=30 loops=13376)
                                             Recheck Cond: (l_partkey = part.p_partkey)
                                             Heap Blocks: exact=403042
                                             Buffers: shared hit=287007 read=171661 dirtied=18
                                             ->  Bitmap Index Scan on lineitem_l_partkey_l_quantity_l_shipmode_idx  (cost=0.00..4.71 rows=31 width=0) (actual time=0.027..0.027 rows=30 loops=13376)
                                                   Index Cond: (l_partkey = part.p_partkey)
                                                   Buffers: shared hit=39660 read=15966
                                 ->  Index Scan using orders_o_orderkey_o_orderdate_idx on orders  (cost=0.43..0.48 rows=1 width=12) (actual time=0.011..0.012 rows=0 loops=401422)
                                       Index Cond: ((o_orderkey = lineitem.l_orderkey) AND (o_orderdate >= '1995-01-01'::date) AND (o_orderdate <= '1996-12-31'::date))
                                       Buffers: shared hit=1312798 read=14397 dirtied=6
                           ->  Hash  (cost=35280.69..35280.69 rows=300000 width=4) (actual time=866.891..866.891 rows=299493 loops=1)
                                 Buckets: 524288  Batches: 1  Memory Usage: 14626kB
                                 Buffers: shared hit=142600 read=3548
                                 ->  Nested Loop  (cost=906.18..35280.69 rows=300000 width=4) (actual time=21.786..773.067 rows=299493 loops=1)
                                       Buffers: shared hit=142600 read=3548
                                       ->  Hash Join  (cost=1.07..2.47 rows=5 width=4) (actual time=0.054..0.085 rows=5 loops=1)
                                             Hash Cond: (n1.n_regionkey = region.r_regionkey)
                                             Buffers: shared hit=2
                                             ->  Seq Scan on nation n1  (cost=0.00..1.25 rows=25 width=8) (actual time=0.006..0.014 rows=25 loops=1)
                                                   Buffers: shared hit=1
                                             ->  Hash  (cost=1.06..1.06 rows=1 width=4) (actual time=0.029..0.029 rows=1 loops=1)
                                                   Buckets: 1024  Batches: 1  Memory Usage: 9kB
                                                   Buffers: shared hit=1
                                                   ->  Seq Scan on region  (cost=0.00..1.06 rows=1 width=4) (actual time=0.022..0.024 rows=1 loops=1)
                                                         Filter: (r_name = 'AFRICA'::bpchar)
                                                         Rows Removed by Filter: 4
                                                         Buffers: shared hit=1
                                       ->  Bitmap Heap Scan on customer  (cost=905.11..6455.64 rows=60000 width=8) (actual time=19.658..143.765 rows=59899 loops=5)
                                             Recheck Cond: (c_nationkey = n1.n_nationkey)
                                             Heap Blocks: exact=145314
                                             Buffers: shared hit=142598 read=3548
                                             ->  Bitmap Index Scan on customer_c_nationkey_c_custkey_idx  (cost=0.00..890.11 rows=60000 width=0) (actual time=12.771..12.771 rows=59899 loops=5)
                                                   Index Cond: (c_nationkey = n1.n_nationkey)
                                                   Buffers: shared hit=7 read=825
                     ->  Index Scan using pk_supplier on supplier  (cost=0.29..0.31 rows=1 width=8) (actual time=0.007..0.008 rows=1 loops=24465)
                           Index Cond: (s_suppkey = lineitem.l_suppkey)
                           Buffers: shared hit=73552
               ->  Hash  (cost=1.25..1.25 rows=25 width=30) (actual time=0.025..0.025 rows=25 loops=1)
                     Buckets: 1024  Batches: 1  Memory Usage: 10kB
                     Buffers: shared hit=1
                     ->  Seq Scan on nation n2  (cost=0.00..1.25 rows=25 width=30) (actual time=0.004..0.007 rows=25 loops=1)
                           Buffers: shared hit=1
 Planning time: 8.142 ms
 Execution time: 10925.340 ms
(70 rows)

COMMIT;
COMMIT
